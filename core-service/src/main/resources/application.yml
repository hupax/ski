# ============================================================================
# SKI Core Service Configuration
# ============================================================================
# This file uses environment variables for sensitive configuration.
# Create a .env file in the project root directory with required variables.
# See .env.example for all available configuration options.
#
# The DotenvConfig class automatically loads .env file at application startup.
# ============================================================================

spring:
  application:
    name: core-service

  # Database Configuration
  # All database credentials must be set in .env file
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:skiuo}
    username: ${POSTGRES_USER:skiuo}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    open-in-view: false

  # SQL Initialization
  sql:
    init:
      mode: always
      schema-locations: classpath:db/schema.sql
      continue-on-error: false

  # Multipart File Upload
  servlet:
    multipart:
      enabled: true
      max-file-size: 500MB
      max-request-size: 500MB
      file-size-threshold: 10MB

  # Server Configuration
server:
  port: ${CORE_SERVICE_PORT:8080}
  compression:
    enabled: true
  error:
    include-message: always

# Storage Configuration
# Set STORAGE_TYPE in .env to choose storage service: minio | oss | cos
storage:
  type: ${STORAGE_TYPE:cos}  # minio | oss | cos

# MinIO Configuration (requires .env configuration when STORAGE_TYPE=minio)
minio:
  endpoint: ${MINIO_ENDPOINT}
  access-key: ${MINIO_ACCESS_KEY}
  secret-key: ${MINIO_SECRET_KEY}
  bucket-name: ${MINIO_BUCKET_NAME:skiuo-videos}
  presigned-url-expiry: ${MINIO_PRESIGNED_URL_EXPIRY:3600}

# Aliyun OSS Configuration (requires .env configuration when STORAGE_TYPE=oss)
oss:
  endpoint: ${OSS_ENDPOINT}
  access-key-id: ${OSS_ACCESS_KEY_ID}
  access-key-secret: ${OSS_ACCESS_KEY_SECRET}
  bucket-name: ${OSS_BUCKET_NAME}
  region: ${OSS_REGION}

# Tencent COS Configuration (requires .env configuration when STORAGE_TYPE=cos)
cos:
  secret-id: ${COS_SECRET_ID}
  secret-key: ${COS_SECRET_KEY}
  region: ${COS_REGION}
  bucket-name: ${COS_BUCKET_NAME}

# gRPC Client Configuration
grpc:
  ai-service:
    host: ${GRPC_AI_SERVICE_HOST:localhost}
    port: ${GRPC_AI_SERVICE_PORT:50051}
    max-inbound-message-size: 104857600  # 100MB

# Video Processing Configuration
video:
  temp-path: ${TEMP_VIDEO_PATH:/Users/hupax/ski/temp}
  window-size: ${VIDEO_WINDOW_SIZE:15}
  window-step: ${VIDEO_WINDOW_STEP:10}

# Async Task Configuration
async:
  core-pool-size: 5
  max-pool-size: 20
  queue-capacity: 100
  thread-name-prefix: "video-task-"

# Logging Configuration
logging:
  level:
    root: ${LOG_LEVEL:INFO}
    com.skiuo.coreservice: ${LOG_LEVEL:INFO}
    org.springframework.web: WARN
    org.hibernate: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized
    env:
      show-values: always
